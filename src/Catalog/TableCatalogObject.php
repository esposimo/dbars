<?php


namespace smn\dbars\Catalog;


use mysql_xdevapi\Table;

class TableCatalogObject extends CatalogObject implements TableCatalogObjectInterface
{

    public function __construct(string $name)
    {
        parent::__construct($name, self::CHILD_TABLE);
        $this->phs->setPattern('{table_name}');
        $this->phs->addPlaceHolder('table_name', function (TableCatalogObjectInterface $instance) {
            return $instance->getName();
        }, [$this]);
    }

    public function addColumn(string $column_name)
    {
        $this->addChild($column_name, self::CHILD_COLUMN);
    }

    public function addColumnInstance(ColumnCatalogObjectInterface $column)
    {
        $this->addChildInstance($column);
    }

    public function getColumn(string $column): ?ColumnCatalogObjectInterface
    {
        return $this->getChild($column, self::CHILD_COLUMN);
    }

    public function hasColumn(string $column): bool
    {
        return $this->hasChild($column, self::CHILD_COLUMN);
    }

    public function hasColumnInstance(ColumnCatalogObjectInterface $column): bool
    {
        return $this->hasChildInstance($column);
    }

    public function removeColumn(string $column_name)
    {
        $this->removeChild($column_name, self::CHILD_COLUMN);
    }

    public function removeColumnInstance(ColumnCatalogObjectInterface $column)
    {
        $this->removeChildInstance($column);
    }

    public function toString(): string
    {
        if ($this->getSchema() != null) {
            $this->phs->setPattern('{parent}.{table_name}');
            $this->phs->addPlaceHolder('parent', function (TableCatalogObjectInterface $instance) {
                return $instance->getSchema()->toString();
            }, [$this]);
        }

        return parent::toString(); // TODO: Change the autogenerated stub
    }

    public function setSchema(SchemaCatalogObjectInterface $schema)
    {
        $this->setParentInstance($schema);
    }

    public function getSchema(): ?SchemaCatalogObjectInterface
    {
        return $this->getParent();
    }

    public function removeSchema()
    {
        $this->removeParent();
    }
}