<?php

namespace Catalog;

use smn\dbars\Catalog\CatalogInterface;
use smn\dbars\Catalog\CatalogObject;
use PHPUnit\Framework\TestCase;
use smn\dbars\Catalog\CatalogObjectInterface;

class CatalogObjectTest extends TestCase
{
    protected CatalogObject $instance;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->instance = new CatalogObject('schema_name','schema');
    }

    public function testAddChildInstance()
    {

        $p = new CatalogObject('table_name','table');

        $this->instance->addChildInstance($p);

        $this->assertCount(1, $this->instance->getChildren('table'));
        $this->assertCount(0, $this->instance->getChildren('schema'));
        $this->assertEquals($this->instance, $p->getParent());





    }

    public function testSetName()
    {
        $this->assertEquals('schema_name', $this->instance->getName());
        $this->instance->setName('new_name');
        $this->assertEquals('new_name', $this->instance->getName());

    }

    public function testSetType()
    {
        $this->assertEquals('schema', $this->instance->getType());
        $this->instance->setType('views');
        $this->assertEquals('views', $this->instance->getType());

    }

    public function testRemoveChild()
    {
        $child = new CatalogObject('table_name','table');
        $this->instance->addChild('table_name', 'table');
        $this->assertCount(1, $this->instance->getChildren('table'));
        $child = $this->instance->getChild('table_name','table');
        $this->instance->removeChild('table_name', 'table');
        $this->assertCount(0, $this->instance->getChildren('table'));
        $this->assertInstanceOf(CatalogObject::class, $child);
        $this->assertNull($child->getParent());

    }

    public function testHasChildInstance() {

        $child = new CatalogObject('table_name','table');
        $child->setParentInstance($this->instance);
        $this->assertTrue($this->instance->hasChildInstance($child));

    }
    public function testRemoveChildInstance()
    {
        $child = new CatalogObject('table_name', 'table');
        $this->instance->addChildInstance($child);
        $this->assertCount(1, $this->instance->getChildren('table'));
        $this->assertTrue($this->instance->hasChildInstance($child));
        $this->assertEquals($this->instance, $child->getParent());
        $this->instance->removeChildInstance($child);
        $this->assertCount(0, $this->instance->getChildren('table'));
        $this->assertFalse($this->instance->hasChildInstance($child));
        $this->assertNull($child->getParent());

    }

    public function testSetParent()
    {
        $this->instance->setParent('root_db','root');
        $this->assertInstanceOf(CatalogObject::class, $this->instance->getParent());
        $parent = $this->instance->getParent();
        $this->assertEquals('root_db', $parent->getName());
        $this->assertEquals('root', $parent->getType());
        $this->assertTrue($parent->hasChildInstance($this->instance));

    }

    public function testGetParent()
    {
        $this->instance->setParent('root_db','root');
        $this->assertInstanceOf(CatalogObject::class, $this->instance->getParent());
        $parent = $this->instance->getParent();
        $this->assertEquals('root_db', $parent->getName());
        $this->assertEquals('root', $parent->getType());
        $this->assertTrue($parent->hasChildInstance($this->instance));

    }

    public function testHasChild()
    {
        $this->assertFalse($this->instance->hasChild('table_name','table'));
        $this->instance->addChild('table_name', 'table');
        $this->assertTrue($this->instance->hasChild('table_name','table'));

    }

    public function testSetParentInstance()
    {

        $p = new CatalogObject('root_db','root');
        $this->instance->setParentInstance($p);
        $this->assertEquals($p, $this->instance->getParent());
        $this->assertTrue($p->hasChildInstance($this->instance));

    }

    public function testHasChildType()
    {
        $this->instance->addChild('table_name','table');
        $this->assertTrue($this->instance->hasChildType('table'));
        $this->assertFalse($this->instance->hasChildType('views'));
        $this->instance->removeChild('table_name','table');
        $this->assertFalse($this->instance->hasChildType('table'));

    }

    public function testGetChildren()
    {
        $this->instance->addChild('table_name1','table');
        $this->instance->addChild('table_name2','table');
        $this->instance->addChild('table_name3','table');
        $this->instance->addChild('table_name4','table');
        $child = $this->instance->getChild('table_name4', 'table');
        $this->assertCount(1, $this->instance->getChildren());
        $this->assertCount(4, $this->instance->getChildren('table'));
        $this->assertCount(4, $this->instance->getChildren()['table']);
    }

    public function testRemoveParent()
    {
        $child = new CatalogObject('table_name', 'table');
        $child->setParentInstance($this->instance);

        $this->assertEquals($child->getParent(), $this->instance);
        $child->removeParent();
        $this->assertNull($child->getParent());
        $this->assertCount(0, $this->instance->getChildren());

    }

    public function testToString()
    {
        $this->assertEquals('schema_name', $this->instance->toString());


    }

    public function testGetName()
    {
        $this->assertEquals('schema_name', $this->instance->getName());

    }

    public function testGetType()
    {
        $this->assertEquals('schema', $this->instance->getType());

    }

    public function testAddChild()
    {
        $this->instance->addChild('table_name1','table');
        $this->assertCount(1, $this->instance->getChildren('table'));
        $child = $this->instance->getChild('table_name1','table');
        $this->assertEquals($this->instance, $child->getParent());

    }

    public function testGetChild()
    {
        $this->instance->addChild('table_name1','table');
        $this->assertCount(1, $this->instance->getChildren('table'));
        $child = $this->instance->getChild('table_name1','table');
        $this->assertEquals($this->instance, $child->getParent());

    }
}
